float PI = 3.1415926535;
float TIME = 70;
float L1 = 8;
float L2 = 11;
float CENTER = 9;
float CENTER_H = 5;
float HEIGHT = 1;
float WIDTH = 5.5;
float POWER = 50;
float CAP = 150;
float stateA;
float stateB;
float countA;
float countB;
float main() {
	countA = (countA + (1 / TIME));
	if ((1 <= countA)) {
		countA = 0;
	}
	countB = (countA + 0.5);
	if ((1 <= countB)) {
		countB = (countB - 1);
	}
	float state;
	if (key(KEY_W)) {
		state = 1;
	} else {
		if (key(KEY_S)) {
			state = 2;
		} else {
			if (key(KEY_A)) {
				state = 3;
			} else {
				if (key(KEY_D)) {
					state = 4;
				} else {
					state = 0;
				}
			}
		}
	}
	if (key(KEY_UP)) {
		CENTER_H = (CENTER_H + 0.01);
	}
	if (key(KEY_DOWN)) {
		CENTER_H = (CENTER_H - 0.01);
	}
	if (key(KEY_RIGHT)) {
		CENTER = (CENTER + 0.01);
		WIDTH = (WIDTH + 0.01);
	}
	if (key(KEY_LEFT)) {
		CENTER = (CENTER - 0.01);
		WIDTH = (WIDTH - 0.01);
	}
	if (((-0.01 < countA) && (countA < 0.01))) {
		stateA = state;
	}
	if (((-0.01 < countB) && (countB < 0.01))) {
		stateB = state;
	}
	if ((stateA == 1)) {
		setLeg(countA, 1, MOTOR_LF2, MOTOR_LF3, (0 - MOTOR_LF1));
		setLeg(countA, 0, MOTOR_RB2, MOTOR_RB3, (0 - MOTOR_RB1));
	} else {
		if ((stateA == 2)) {
			setLeg(countA, 0, MOTOR_LF2, MOTOR_LF3, (0 - MOTOR_LF1));
			setLeg(countA, 1, MOTOR_RB2, MOTOR_RB3, (0 - MOTOR_RB1));
		} else {
			if ((stateA == 3)) {
				setLeg(countA, 0, MOTOR_LF2, MOTOR_LF3, (0 - MOTOR_LF1));
				setLeg(countA, 0, MOTOR_RB2, MOTOR_RB3, (0 - MOTOR_RB1));
			} else {
				if ((stateA == 4)) {
					setLeg(countA, 1, MOTOR_LF2, MOTOR_LF3, (0 - MOTOR_LF1));
					setLeg(countA, 1, MOTOR_RB2, MOTOR_RB3, (0 - MOTOR_RB1));
				} else {
					setLeg(-1, 1, MOTOR_LF2, MOTOR_LF3, (0 - MOTOR_LF1));
					setLeg(-1, 0, MOTOR_RB2, MOTOR_RB3, (0 - MOTOR_RB1));
				}
			}
		}
	}
	if ((stateB == 1)) {
		setLeg(countB, 1, (0 - MOTOR_RF2), (0 - MOTOR_RF3), MOTOR_RF1);
		setLeg(countB, 0, (0 - MOTOR_LB2), (0 - MOTOR_LB3), MOTOR_LB1);
	} else {
		if ((stateB == 2)) {
			setLeg(countB, 0, (0 - MOTOR_RF2), (0 - MOTOR_RF3), MOTOR_RF1);
			setLeg(countB, 1, (0 - MOTOR_LB2), (0 - MOTOR_LB3), MOTOR_LB1);
		} else {
			if ((stateB == 3)) {
				setLeg(countB, 1, (0 - MOTOR_RF2), (0 - MOTOR_RF3), MOTOR_RF1);
				setLeg(countB, 1, (0 - MOTOR_LB2), (0 - MOTOR_LB3), MOTOR_LB1);
			} else {
				if ((stateB == 4)) {
					setLeg(countB, 0, (0 - MOTOR_RF2), (0 - MOTOR_RF3), MOTOR_RF1);
					setLeg(countB, 0, (0 - MOTOR_LB2), (0 - MOTOR_LB3), MOTOR_LB1);
				} else {
					setLeg(-1, 1, (0 - MOTOR_RF2), (0 - MOTOR_RF3), MOTOR_RF1);
					setLeg(-1, 0, (0 - MOTOR_LB2), (0 - MOTOR_LB3), MOTOR_LB1);
				}
			}
		}
	}
	return 0;
}
float setLeg(float step, float isFlont, float motor1, float motor2, float motor4) {
	if ((step < 0)) {
		setAngle(CENTER, (CENTER_H + HEIGHT), motor1, motor2, motor4);
	} else {
		if ((step < 0.3)) {
			step = (step / 0.3);
			if (isFlont) {
				setAngle((CENTER - (step * WIDTH)), (CENTER_H + HEIGHT), motor1, motor2, motor4);
			} else {
				setAngle((CENTER + (step * WIDTH)), (CENTER_H + HEIGHT), motor1, motor2, motor4);
			}
		} else {
			if ((step < 0.4)) {
				step = ((step - 0.3) / 0.1);
				if (isFlont) {
					setAngle(((CENTER - WIDTH) - (sin((step * PI)) * HEIGHT)), (CENTER_H + (cos((step * PI)) * HEIGHT)), motor1, motor2, motor4);
				} else {
					setAngle(((CENTER + WIDTH) + (sin((step * PI)) * HEIGHT)), (CENTER_H + (cos((step * PI)) * HEIGHT)), motor1, motor2, motor4);
				}
			} else {
				if ((step < 0.6)) {
					step = ((step - 0.4) / 0.2);
					if (isFlont) {
						setAngle(((CENTER - WIDTH) + ((step * WIDTH) * 2)), (CENTER_H - HEIGHT), motor1, motor2, motor4);
					} else {
						setAngle(((CENTER + WIDTH) - ((step * WIDTH) * 2)), (CENTER_H - HEIGHT), motor1, motor2, motor4);
					}
				} else {
					if ((step < 0.7)) {
						step = ((step - 0.6) / 0.1);
						if (isFlont) {
							setAngle(((CENTER + WIDTH) + (sin((step * PI)) * HEIGHT)), (CENTER_H - (cos((step * PI)) * HEIGHT)), motor1, motor2, motor4);
						} else {
							setAngle(((CENTER - WIDTH) - (sin((step * PI)) * HEIGHT)), (CENTER_H - (cos((step * PI)) * HEIGHT)), motor1, motor2, motor4);
						}
					} else {
						if ((step < 1.0)) {
							step = ((step - 0.7) / 0.3);
							if (isFlont) {
								setAngle(((CENTER + WIDTH) - (step * WIDTH)), (CENTER_H + HEIGHT), motor1, motor2, motor4);
							} else {
								setAngle(((CENTER - WIDTH) + (step * WIDTH)), (CENTER_H + HEIGHT), motor1, motor2, motor4);
							}
						}
					}
				}
			}
		}
	}
}
float setAngle(float x, float y, float motor1, float motor2, float motor4) {
	float s2 = (((pow(x) + pow(y)) - (pow(L1) + pow(L2))) / ((L1 * L2) * 2));
	float t2 = asin(s2);
	float c2 = cos(t2);
	float c1 = ((((L1 + (L2 * s2)) * x) + ((L2 * c2) * y)) / (pow((L1 + (L2 * s2))) + pow((L2 * c2))));
	float t1 = acos(c1);
	float t3 = (0 - (t1 + t2));
	float t4 = (0.15 - ((CENTER - x) / 40));
	set(motor1, getValue(get(motor1), (0 - t1), POWER));
	set(motor2, getValue(get(motor2), (0 - t2), POWER));
	set(motor4, getValue(get(motor4), t4, POWER));
}
float getValue(float now, float goal, float power) {
	float r = (getRanged((goal - now)) * power);
	if ((r < (0 - CAP))) {
		r = (0 - CAP);
	}
	if ((CAP < r)) {
		r = CAP;
	}
	return r;
}
float getRanged(float angle) {
	while ((PI < angle)) {
		angle = (angle - (PI * 2));
	}
	while ((angle < (0 - PI))) {
		angle = (angle + (PI * 2));
	}
	return angle;
}
float abs(float a) {
	if ((0 < a)) {
		return a;
	} else {
		return (0 - a);
	}
}
float pow(float a) {
	return (a * a);
}
